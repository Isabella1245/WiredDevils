// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot;

import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.Timer;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.math.controller.PIDController;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.Encoder;
import com.kauailabs.navx.frc.AHRS;
import edu.wpi.first.wpilibj.SPI;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.Counter;
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

public class Robot extends TimedRobot {

  //DRIVE MOTORS
  WPI_TalonSRX FRDmotor = new WPI_TalonSRX(4);
  WPI_TalonSRX FLDmotor = new WPI_TalonSRX(1);
  WPI_TalonSRX BRDmotor = new WPI_TalonSRX(6);
  WPI_TalonSRX BLDmotor = new WPI_TalonSRX(8);

  //TURNING MOTORS
  WPI_TalonSRX BLTmotor = new WPI_TalonSRX(2);
  WPI_TalonSRX BRTmotor = new WPI_TalonSRX(5);
  WPI_TalonSRX FLTmotor = new WPI_TalonSRX(7);
  WPI_TalonSRX FRTmotor = new WPI_TalonSRX(3);

  //encoders
  Encoder FRencoder = new Encoder(8, 9);
  Encoder FLencoder = new Encoder(6, 7);
  Encoder BRencoder = new Encoder(1, 0);
  Encoder BLencoder = new Encoder(3, 2);

  //gyro
  AHRS navX = new AHRS(SPI.Port.kMXP);

  //LOWER CONTROLS
  double yAxisLower = 0;
  double xAxisLower = 0;
  double zAxisLower = 0;
  double slider = -1;

  //UPPER CONTROLS
  double yAxisLeftUpper = 0;
  double xAxisRightUpper = 0;
  double rightTriggerUpper = 0;
  double leftTriggerUpper = 0;

  boolean balanceModeOn = false;
  boolean balanceModeOff = true;


  //VARIABLES
  double deadband = 0.1;
  double speedFactor = (0.5 * slider) + 0.5;
  boolean balanceMode = false;
  
  double joystickSpeed = Math.sqrt((yAxisLower * yAxisLower) + (xAxisLower * xAxisLower));
  double angle = Math.atan(xAxisLower/yAxisLower);
  double angleToEncoder = (angle - 0.202) / 0.0207;
  double FRencoderToAngle = (0.0207 * FRencoder.getDistance()) + 0.202;
  
  double FRencoderError = angle - FRencoderToAngle;
  double FLencoderError;
  double BRencoderError;
  double BLencoderError;
  double encoderKP = 0.09;

  //JOYSTICKS
  Joystick joystickLower = new Joystick(1);
  Joystick xboxUpper = new Joystick(0);
  

  @Override
  public void robotInit() {

  FRencoder.setDistancePerPulse(300./7.);
  FLencoder.setDistancePerPulse(300./7.);
  BRencoder.setDistancePerPulse(300./7.);
  BLencoder.setDistancePerPulse(300./7.);

  //invert the wheels that are positioned backwards 
  FLDmotor.setInverted(true);
  BLDmotor.setInverted(true);

    //reset the encoders in the beginning when the robot initiates
    FRencoder.reset();
    FLencoder.reset();
    BRencoder.reset();
    BLencoder.reset();

    //reset the navx gyro when the robot initiates
    navX.reset();
  }

  @Override
  public void autonomousInit() {}

  @Override
  public void autonomousPeriodic() {}

  @Override
  public void teleopInit() {}

  @Override
  public void teleopPeriodic() {
   ReadJoystick();
    ReadSensors();
    MoveRobot();

    
    SmartDashboard.putNumber("FRencoder", FRencoder.getDistance());
  }

  public void ReadJoystick(){

    //upper
    yAxisLeftUpper = xboxUpper.getRawAxis(1) * -1;
    xAxisRightUpper = xboxUpper.getRawAxis(4);
    rightTriggerUpper = xboxUpper.getRawAxis(3);
    leftTriggerUpper = xboxUpper.getRawAxis(2);
    balanceModeOn = xboxUpper.getRawButton(8);
    balanceModeOff = xboxUpper.getRawButton(7);

    //lower
    yAxisLower = joystickLower.getRawAxis(1) * -1;
    xAxisLower = joystickLower.getRawAxis(0);
    zAxisLower = joystickLower.getRawAxis(2);
    slider = joystickLower.getRawAxis(3) * -1;

  }

  public void ReadSensors(){}

  public void MoveRobot(){ 
  
  //IMPORTANT
  //in driver station, if you look at the controller's connection, the left y axis seems to be 
  //inverted for some reason, same with the joystick and slider???

  // deadband 1
    if (yAxisLower < 0.2 && yAxisLower > -0.2 && xAxisLower < 0.2 && xAxisLower > -0.2) {
      FRDmotor.set(0);
      FLDmotor.set(0);
      BRDmotor.set(0);
      BLDmotor.set(0);

      FRTmotor.set(0);
      FLTmotor.set(0);
      BRTmotor.set(0);
      BLTmotor.set(0);
    }

    if (yAxisLower > 0.2 || yAxisLower < -0.2 || xAxisLower > 0.2 || xAxisLower < -0.2) {
      if (yAxisLower > 0) {
        FRDmotor.set(joystickSpeed * speedFactor);
        FLDmotor.set(joystickSpeed * speedFactor);
        BRDmotor.set(joystickSpeed * speedFactor);
        BLDmotor.set(joystickSpeed * speedFactor);

        FRTmotor.set(0 + (encoderKP * FRencoderError));

      } else if (yAxisLower < 0) {
        FRDmotor.set(joystickSpeed * speedFactor * -1);
        FLDmotor.set(joystickSpeed * speedFactor * -1);
        BRDmotor.set(joystickSpeed * speedFactor * -1);
        BLDmotor.set(joystickSpeed * speedFactor * -1);
      }else{

      FRTmotor.set(0);
      FLTmotor.set(0);
      BRTmotor.set(0);
      BLTmotor.set(0);
      }
    }
  }
  
  @Override
  public void testInit() {}

  @Override
  public void testPeriodic() {}
}

